@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json

@implements IAsyncDisposable
@inject NavigationManager NavManager
<DxButton Text="Print" Click="@PrintOrder"></DxButton>
<DxPopup @bind-Visible="@showAlert" HeaderText="Confirm" ShowFooter="true">
	<BodyContentTemplate>
		<span>@alertMessage</span>
	</BodyContentTemplate>
	<FooterContentTemplate>
		<DxButton Click="@(() => showAlert = false)" Text="OK"></DxButton>
	</FooterContentTemplate>
</DxPopup>


@code {
	private HubConnection? hubConnection;
	IDictionary<string, object> PrintParams = new Dictionary<string, object>();
	bool showAlert { get; set; }
	string alertMessage { get; set; } = "";

	[Parameter] public string PrintID { get; set; } = default!;
	[Parameter] public EventCallback<string> PrintIDChanged{ get; set; }
	[Parameter] public string Printer { get; set; } = default!;
	[Parameter] public EventCallback<string> PrinterChanged{ get; set; }
	[Parameter] public string ReportName { get; set; } = default!;
	[Parameter] public EventCallback<string> ReportNameChanged { get; set; }
	[Parameter] public int InvoiceId { get; set; }
	[Parameter] public EventCallback<int> InvoiceIdChanged { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavManager.ToAbsoluteUri("/printhub"))
			.Build();

		await hubConnection.StartAsync();
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}

	public async Task PrintOrder()
	{		
		PrintPDFArgs args = new PrintPDFArgs(Printer, 1, InvoiceId, "Don", "Receipt");
		if (hubConnection is not null)
		{
			bool success = await hubConnection.InvokeAsync<bool>("PrintReceipt", args.UserID, this.PrintID, args);
			if (!success)
			{
				alertMessage = "No printer found";
				showAlert = true;
				return;
			}
		}
	}
}
